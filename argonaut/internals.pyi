from collections.abc import Callable
from types import UnionType
from typing import NoReturn, Literal, Final, Never, Self, Any, overload, final


Unset: Final[UnsetType]

@final
class UnsetType:
    def __or__(self, other: Any, /) -> UnionType: ...
    def __ror__(self, other: Any, /) -> UnsetType: ...
    def __new__(cls) -> Self: ...
    def __bool__(self) -> Literal[False]: ...
    def __repr__(self) -> str: ...
    def __init_subclass__(cls, **kwargs: Never) -> NoReturn: ...

class StorageGuard:
    def __new__(cls) -> StorageGuard: ...
    def __getattribute__(self, name: str, /) -> Any: ...
    def __setattr__(self, name: str, value: Any, /) -> None: ...

@overload
def nullify(object: Any, /) -> Any | None: ...
@overload
def nullify[_T](object: Any, default: _T, /) -> Any | _T: ...

@overload
def rename(x: Callable[..., Any], /, name: str) -> Callable[..., Any]: ...
@overload
def rename(name: str, /) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...

def view(name: str, /) -> property: ...

def mglob(source: str, /) -> list[str]: ...
