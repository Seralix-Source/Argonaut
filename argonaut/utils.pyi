from collections.abc import Callable
from types import UnionType
from typing import NoReturn, Literal, Final, Never, Self, Any, overload, final

@final
class UnsetType:
    def __or__(self, other: Any, /) -> UnionType: ...
    def __ror__(self, other: Any, /) -> UnsetType: ...
    def __new__(cls) -> Self: ...
    def __bool__(self) -> Literal[False]: ...
    def __repr__(self) -> str: ...
    def __init_subclass__(cls, **options: Never) -> NoReturn: ...

@overload
def coalesce(object: Any, /) -> Any | None: ...
@overload
def coalesce[_T](object: Any, default: _T, /) -> Any | _T: ...
@overload
def rename(name: str, /) -> Callable[[Callable], Callable]: ...
@overload
def rename(callable: Callable, name: str, /) -> Callable: ...
def mirror(name: str, /) -> property: ...
def pluralize(text: str, /) -> str: ...
def mglob(source: str, /) -> list[str]: ...

Unset: Final[UnsetType]
