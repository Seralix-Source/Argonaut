from abc import ABC, abstractmethod
from collections.abc import Callable, Mapping
from typing import Protocol, Any


class CommandFault(Protocol):
    message: str
    options: Mapping[str, Any]
    def __init__(self, message: str, **options: Any) -> None: ...
    def __replace__(self, **options: Any) -> CommandFault: ...
    def __trigger__(self) -> None: ...

class CommandException(ABC, Exception):
    message: str
    options: Mapping[str, Any]
    def __init__(self, message: str, **options: Any) -> None: ...
    def __replace__(self, **options: Any) -> CommandException: ...
    @abstractmethod
    def __trigger__(self) -> None: ...
class CommandWarning(ABC, Warning):
    message: str
    options: Mapping[str, Any]
    def __init__(self, message: str, **options: Any) -> None: ...
    def __replace__(self, **options: Any) -> CommandWarning: ...
    @abstractmethod
    def __trigger__(self) -> None: ...

def trigger(fault: CommandFault, /, **options: Any) -> None: ...
def mutate(fault: type[CommandFault]) -> Callable[[Callable[..., Any]], Callable[..., Any]]: ...
