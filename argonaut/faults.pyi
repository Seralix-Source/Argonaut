from abc import ABC, abstractmethod
from collections.abc import Mapping
from typing import Protocol, Any, Never
from typing import type_check_only  # NOQA: Needed

from argonaut.internals import UnsetType


@type_check_only
class Triggerable(Protocol):
    def __trigger__(self) -> None: ...
    def __replace__(self, *unused: Never, **overrides: Any) -> Triggerable: ...


class CommandException(ABC, Exception):
    message: str | UnsetType
    options: Mapping[str, Any]
    def __init__(self, message: str = ..., /, **options: Any) -> None: ...
    @abstractmethod
    def __trigger__(self) -> None: ...
    def __replace__(self, *unused: Never, **overrides: Any) -> CommandException: ...

class MalformedTokenError(CommandException):
    def __trigger__(self) -> None: ...

class UnknownModifierError(CommandException):
    def __trigger__(self) -> None: ...

class FlagTakesNoParamError(CommandException):
    def __trigger__(self) -> None: ...

class UnknownCommandError(CommandException):
    def __trigger__(self) -> None: ...

class UnknownSubcommandError(CommandException):
    def __trigger__(self) -> None: ...

class TooManyPositionalsError(CommandException):
    def __trigger__(self) -> None: ...

class DuplicateModifierError(CommandException):
    def __trigger__(self) -> None: ...

class InlineParamRequiredError(CommandException):
    def __trigger__(self) -> None: ...

class MissingParamError(CommandException):
    def __trigger__(self) -> None: ...

class AtLeastOneParamRequiredError(CommandException):
    def __trigger__(self) -> None: ...

class NotEnoughParamsError(CommandException):
    def __trigger__(self) -> None: ...

class TooManyInlineParamsError(CommandException):
    def __trigger__(self) -> None: ...

class InvalidParamError(CommandException):
    def __trigger__(self) -> None: ...

class DisallowedParamError(CommandException):
    def __trigger__(self) -> None: ...

class UncastableParamError(CommandException):
    def __trigger__(self) -> None: ...

class InvalidChoiceError(CommandException):
    def __trigger__(self) -> None: ...

class CommandWarning(ABC, Warning):
    message: str | UnsetType
    options: Mapping[str, Any]
    def __init__(self, message: str = ..., /, **options: Any) -> None: ...
    @abstractmethod
    def __trigger__(self) -> None: ...
    def __replace__(self, *unused: Never, **overrides: Any) -> CommandWarning: ...

class EmptyInlineParamWarning(CommandWarning):
    def __trigger__(self) -> None: ...

class DeprecatedArgumentWarning(CommandWarning):
    def __trigger__(self) -> None: ...

class ExternalConverterWarning(CommandWarning):
    def __trigger__(self) -> None: ...

def trigger(fault: Triggerable, /, **options: Any) -> None: ...


